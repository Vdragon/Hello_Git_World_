# 基本版本控制系統概念介紹
## 內容<br>Content
顧名思義，內容就是您的某個工作的內容（如果是軟體開發的話就是軟體的來源程式碼(source code)，如果是寫一本書的話就是書的內容）。

## 版本<br>Version/Revision(?)
版本(version/revision)為您對 內容(content) 的特定狀態所取名的識別名稱，如：  
![Retext 關於視窗畫面擷取圖案](資源/關於-ReText.png "ReText 關於視窗畫面擷取圖案")

「4.1.2」為 ReText 這個 Markdown 與 reStructuredText 文件編輯器對於該軟體目前的狀態（程式設計、介面設計等）的識別名稱。版本不一定一定要如前例一樣是數字跟英式句點(period)的組合，您如果高興的話也可以把某個內容的特定狀態取名為「黃色小鴨」版或是「逆轟高灰」版，不過大型專案一般會採用「語意化版本編號(Semantic Versioning)」，以 &lt;MAJOR&gt;.&lt;MINOR&gt;.&lt;PATCH&gt; 的格式來取版本號，詳細資訊可以參考其官方網站：

<http://semver.org/lang/zh-TW/>

## 內容差異<br>Content Diff(erence)
然而對我們來說版本叫作什麼並沒有多大的意義，我們反倒通常對「兩個不同的版本之間內容到底變了什麼」比較感興趣，這就是「內容差異（difference，常簡稱為 diff）」，比方說：

* （相對於 0.1 版本，）ReText 0.2 版本修正了某些情況下啟動會發生程式崩潰的問題。
* 這本書的第二版只新增了「作者的話」章節，由於這個章節對我來說沒什麼用所以我只要買第一版就好了。

## 版本控制<br>Version Controlling
顧名思義，企圖控制好你的內容的各個不同的版本（跟他們的的內容變更），讓您在某些問題中可以得到方便就是版本控制，比方說：

* 這個程式在第 0.2 版本的時候被我改到爛掉了，但是我還有第 0.1 版本的內容備份，此時我至少可以做兩件事解決這個問題：
	1. 把第 0.2 版本跟第 0.1 版本拿出來比較(compare)一下看看我改了什麼，找到問題之後再把 0.2 版修好。
    2. 打掉重練，把第 0.2 版直接捨棄，換回第 0.1 版重新出發。

這樣通常總比「由於 0.1 版弄不回來了，只能一直看 0.2 版想辦法把錯誤揪出來」有彈性多了，這就是版本控制的其中一種好處。

## 版本控制系統<br>Version Control System(VCS)
顧名思義，用來幫您做好版本控制的一套系統就是版本控制系統，版本控制系統依照其特性一般分為兩種類型：

### 中心式版本控制系統
此類版本控制系統將所有版本保存在單一伺服器上，使用者在本地端只有一份版本，在沒有網路連線的狀況下無法取得其他版本的資料，也無法把新的版本提交出去。

以下版本控制系統為中心式版本控制系統：

* &lt;TODO&gt;

### 非中心式版本控制系統
此類版本控制系統無論是伺服器端或是本地端皆保存了所有的版本，所以在沒有網路連線的狀況下使用者依然可以取得其他版本的資料，也可以提交新的版本並在有網路連線的時候將新版本推送到伺服器上供其他使用者存取。

以下版本控制系統為非中心式版本控制系統：

* [Git](https://git-scm.com/)
* [Bazaar](http://bazaar.canonical.com/)

## 版本倉庫<br>Version repository
顧名思義，版本倉庫就是保存所有版本的場所，只要沒有動到版本倉庫您過去提交進版本倉庫的版本就不會不見。
