# 版本控制？那是什麼？可以吃嗎？
本章節企圖讓您對版本控制系統有些基本的概念，並挑起您對 Git 版本控制系統的學習動機。

這裡我們引用 [CrBoy 的《寫程式？那些老師沒教的事》簡報](http://www.slideshare.net/taichunmin/ss-16096723)（Creative Commons BY-SA 第 3 版授權）來說明版本控制系統如何來解決程式設計師（以及其他專業的人）的問題。

## 假設您是一個學習程式設計的學生，老師說：「努力是會有回報的！……多寫一個功能加 10 分」

所以您開始努力……

![改程式01](資源/改程式_01.png)  
![改程式02](資源/改程式_02.png)  
![改程式03](資源/改程式_03.png)  
![改程式04](資源/改程式_04.png)  
![改程式05](資源/改程式_05.png)

您花了兩天  
……結果功能寫爛了

又花兩天把程式碼改回來

![改回來](資源/改回來_01.png)  
![改回來](資源/改回來_02.png)  
![改回來](資源/改回來_03.png)  
![改回來改回來改回來](資源/改回來_04.png)  
![通通改回來](資源/改回來_05.png)  
![真的改回來的嗎？有沒有哪裡改錯？](資源/改回來_06.png)

……

……

……

![有沒有哪裡改錯？](資源/有沒有哪裡改錯？.png)

要避免改錯，只要把之前做的備份起來就好了嘛！  
然後就出現了……

![project 資料夾](資源/新資料夾_01.png)

![「複製 -project」新資料夾](資源/新資料夾_02.png)

![「project-backup2」新資料夾](資源/新資料夾_03.png)

![「project20111219」新資料夾](資源/新資料夾_04.png)

![「project20111220」新資料夾](資源/新資料夾_05.png)

![「project20111220-2」新資料夾](資源/新資料夾_06.png)

![「project new」新資料夾](資源/新資料夾_07.png)

![「project newnew」新資料夾](資源/新資料夾_08.png)

![「project 最新版」新資料夾](資源/新資料夾_09.png)

![「project 最新版 - 改」新資料夾](資源/新資料夾_10.png)

![「project 最新版 - 再改」新資料夾](資源/新資料夾_11.png)

還有用 EXCEL 記錄改了什麼的……  
<span style='font-size:200%'>◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</span>

## 很多人合作 project 的時候……
![「我的比較好！」「我比較早寫好！！！！」「聽我的就對了啦」「幹！哇洗國寶捏！」](資源/「我的比較好！」「我比較早寫好！！！！」「聽我的就對了啦」「幹！哇洗國寶捏！」.png)

有時候還會不小心蓋掉別人的  
組員表示：

![怪我囉](資源/怪我囉.png)

<span style='font-weight: 800; font-size:1000%'>超</span><span style='font-size:200%'>◢▆▅▄▃崩╰(〒皿〒)╯潰▃▄▅▇◣</span>

## 程式設計師的美德？

……

……

……

……

……

……

<span style='font-size:1000%'>懶</span>  
![影片對白：「別浪費時間，快來吧」](資源/別浪費時間，快來吧.png)

## 救星：Git - The Stupid Content Tracker（以及其他眾多的版本控制系統，不過我們這本書只有介紹 Git）
這是由 Linux 作業系統核心的創始人 Linus Torvalds 為這個專案打造的分散式版本控制系統

### 好多人在用 Git
* [Linux 作業系統核心](http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git)
* [Android 作業系統](https://android.googlesource.com/)
* [CakePHP](https://github.com/cakephp)
* [Drupal](http://cgit.drupalcode.org/drupal)
* [GIMP 繪圖軟體](https://git.gnome.org/browse/gimp/)
* [jQuery](https://github.com/jquery/jquery)
* [GTK+](https://git.gnome.org/browse/gtk+/)
* [Qt](http://code.qt.io/cgit/)
* [phpBB](https://github.com/phpbb/phpbb)
* [Ruby on Rails](https://github.com/rails/rails)
* [PostgreSQL](http://git.postgresql.org/gitweb/)
* （罄竹難書……這用法好像怪怪 der）
* 以及 [Git 自己也是](https://git.kernel.org/cgit/git/git.git/)

### 為什麼要版本控制？
#### 記住孩子的成長過程
每次的修改都知道改了什麼東西，以及為何要改這些東西

#### 改爛程式不用怕
超強時光回溯功能，輕鬆回到沒出問題的版本

#### 可以同時新增不同功能，又不互相影響
再也不用因為老闆的臨時出現讓做到一半的工作前功盡棄

#### 簡單方便的異地備援
防意外，還可以防小人

#### 容易分工合作，改爛程式的人還推不掉責任
「你看看你這行把我們的資料庫都砍掉了！（設計對白）」

#### 再也不用在檔名中說故事
![檔名中說故事](資源/檔名中說故事.png)
