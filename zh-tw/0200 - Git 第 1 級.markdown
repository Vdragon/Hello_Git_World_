# Git 第 1 級<br>Git Level 1
## 安裝 Git<br>Install Git
### GNU/Linux 作業系統散佈版 - 透過作業系統散佈版的軟體來源安裝
安裝 `git` 軟體包即可

### Microsoft Windows 作業系統 - 透過安裝程式

## Git 命令<br>Git commands
Git 版本控制系統由多個大部份都在命令列介面底下執行的「Git 命令」組成，執行 Git 命令的方式為：
```
$ git 〈Git 命令名稱〉 （Git 命令參數）
```
例： `$ git help`  

## Git 圖形介面前端<br />Git GUI frontends
除了 Git 命令以外也有人開發圖形介面的 Git 版本控制系統前端(frontend)軟體，讓您在不使用 Git 命令的狀況下仍能完成大多數的 Git 操作，例如：

* [Git Cola](http://git-cola.github.io/)
![Git Cola 畫面擷取圖案](資源/Git-Cola.png)

於本教材中我們將以命令列介面的操作為主，然後以圖形介面前端來輔助讀者理解。

## 尋求幫助<br />Seeking for help
開始不知所措了？Git 有非常多的資源可以幫助您解決問題，例如：

### 以 `help` Git 命令查看常用 Git 命令以及指定 Git 命令的 manpage 格式使用手冊(manual)
您可以以下列命令察看 Git 最常用的幾個命令：
`````
$ git help
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Find by binary search the change that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Forward-port local commits to the updated upstream head
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

`````

您可以以下列命令查尋各個 Git 命令的 manpage 格式使用手冊：
`````
$ git help 〈Git 命令名〉
（等價於 $ man git-〈Git 命令名〉）
`````

比方說 `$ git help clone` 可以查詢 `clone` Git 命令的使用手冊，其中會有這個命令支援哪些參數以及參數的用途等說明。

### 查看《Pro Git》官方教科書
[Pro Git](http://git-scm.com/book/zh-tw) 是由 Scott Chacon 和 Ben Straub 所著的 Git 官方教科書。

### 查看[其他學習資源](其他學習資源.markdown)

### 於 [Git.tw Facebook 社團](https://www.facebook.com/groups/git.tw)詢問其他 Git 使用者

### 於 irc.freenode.net IRC 聊天室托管服務的 #git 頻道討論
安裝一個 IRC 聊天室客戶端，連上 irc.freenode.net 站台再加入 #git 頻道即可參與 Git 相關的線上討論。

## 初始化必要 Git 設定
接下來我們要設定一些提交版本前一定要先設定好的東西，請依照指示進行操作。

這裡我們將會用到 `config` 這個 Git 命令來修改 Git 的設定值，此命令的詳細資訊將於後面的章節補完。

### 設定您的稱謂與電子郵件信箱地址
於 Git 版本控制系統中每個版本都跟建立該版本的人的「身份」連結在一起，「身份」包含該人的稱謂（建議但不一定要是您的真名）跟電子郵件信箱地址。

於 Git 中通常您的身份會以 [RFC5322](https://tools.ietf.org/html/rfc5322) 規範的格式顯示，比方說
```
"Ｖ字龍(Vdragon)" <Vdragon.Taiwan@gmail.com>
```

使用下列命令設定您的稱謂跟電子郵件信箱地址
```
$ git config --global user.name 〈您在 Git 中要使用的稱謂（如果內容包含空白字元的話整個參數要用引號括住才不會被殼程式錯誤地解釋為是兩個分開的參數）〉
$ git config --global user.email 〈您的電子郵件信箱地址〉
```

比方說要設定

```
Ｖ字龍(Vdragon Taiwan) <Vdragon.Taiwan@gmail.com>
```

的身份的話就執行

```
$ git config --global user.name "Ｖ字龍(Vdragon Taiwan)"
$ git config --global user.email Vdragon.Taiwan@gmail.com
```

## 初始化 Git 版本倉庫<br />Initialize Git version repository
現在我們要使用 `init` Git 命令將版本倉庫(version repository)初始化，請開啟一個終端機(terminal)，然後將當前工作目錄(current working directory(C.W.D.))切換到您想要進行版本控制的內容(content)的根目錄（我們這裡假定是 `/home/user/workspace/my_content`），然後執行下列命令：
`````
/home/user/workspace/my_content $ git init
Initialized empty Git repository in /home/user/workspace/my_content/.git/
`````
`init` Git 命令的輸出訊息會告訴您它於您的內容(content)的根目錄底下的 `.git` 目錄初始化了一個空的 Git 版本倉庫。

要注意的是於類 Unix 作業系統中以英式句點(.)開頭的目錄或檔案皆為*隱藏檔*，如果您沒有發現 `.git` 目錄的存在的話請調整您的檔案管理軟體的設定值讓它顯示隱藏檔。

### 劃分區域說明
在建立了 Git 版本倉庫的當下其實您的內容(content)根目錄底下就已經悄悄地被 Git 劃分為** 3 個區域**，分別說明如下：

#### 版本倉庫(version repository)（位於 `.git/` 目錄內）

#### 版本提交準備區域(staging area)（又稱為 index）（位於 `.git/` 目錄內）
這是用來準備您要提交的新版本的區域，您要將想要放進此版本提交的內容變更一一放進這裡，最後再將所有在這裡的變更提交為一個新版本放到版本倉庫中(version repository)

#### 工作目錄(working directory)（位於 `.git/` 目錄外）
這是讓您編輯內容的區域

## 查看目前版本倉庫狀態
當您的當前工作目錄(current working directory)位於您的內容根目錄底下時，您可以用 `status` Git 命令來察看目前版本倉庫的狀態，使用方式為：
```
$ git status
```

它會告訴您您目前在哪個分支(branch)上，版本提交區域中有哪些變更，以及工作目錄(working directory)中有哪些尚未提交到版本倉庫的變更與尚未被追蹤版本的檔案。

## 將內容變更移入版本提交準備區域(staging area)
您可以使用 `add` Git 命令將指定檔案／目錄的內容變更移入版本提交準備區域，使用方法如下：
`````
$ git add 〈包含內容變更的檔案／目錄路徑〉
`````

此時您若執行 `git status` 命令會發現類似下列的訊息：
```
On branch 主要開發分支(master)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   〈內容變更移入版本提交準備區域(staging area)的項目路徑〉

```

告訴您現在版本提交準備區域(staging area)內有內容變更等著被提交為新版本，另外您可以用 `git reset HEAD 〈檔案路徑〉` 命令將該內容變更移出版本提交準備區域(staging area)，我們之後會詳細說明該 `reset` Git 命令到底在做什麼事情。

### （實用）僅將檔案*部份*內容變更移入版本提交準備區域(staging area)
有的時候會遇到「您對同一個檔案做了許多變更，但是有一些變更您不想要放進同一個版本」的狀況，這個時候您可以使用 `--patch` `add` Git 命令參數以互動式的方式來指定哪些變更要移進版本提交準備區域(staging area)，而哪些變更不要。

（詳細流程待補）

## 將版本提交準備區域內的內容變更合併為一個新的版本提交至版本倉庫中
當您準備好您的版本提交後，您就可以使用 `commit` Git 命令將所有版本提交準備區域(staging area)中的內容變更提交到版本倉庫中成為一個新的版本，使用方式如下：
`````
$ git commit
`````

Git 會啟動一個純文字文件編輯器讓您輸入該版本提交的標題與詳細資料，當您存檔並結束純文字編輯器後一個新的版本就成功地提交到版本倉庫中了！

您會看到 `commit` Git 命令會輸出像是下列的訊息：
`````
[master 121598d] 〈版本提交標題〉
 1 file changed, 1 insertion(+), 1 deletion(-)

`````
「121598d」為剛提交的版本的 SHA-1 雜湊(hash)編號的前 7 位，每個版本都會用它的內容算出獨一無二的 4? 位元 SHA-1 雜湊(hash)，我們之後會用它來表示這個版本

### 為版本提交署名(Sign off)
`commit` Git 命令有一個特別的參數叫作「署名(sign off)」，使用方式如下：
`````
$ git commit --signoff
`````

您會發現新版本提交的詳細資料區域中會多出一列「Signed-off-by: 〈您的稱謂〉 &lt;〈您的電子郵件信箱地址〉&gt;」，它的用途基本上是要您宣示您所提交的變更完全合法，不會對軟體專案造成損害（比方說將未經過授權的專有程式片段加到別人的程式中對他人造成法律威脅），有些軟體專案會只引入有「Signed-off-by: 」列的版本提交。

## 查看目前的版本提交紀錄
您可以用 `log` Git 命令查看您先前所提交的所有版本，例如：
`````
$ git log
commit 121598ded0d8680e91a758773ff55972b833c422
Author: Ｖ字龍(Vdragon) <Vdragon.Taiwan@gmail.com>
Date:   Mon Sep 7 14:19:07 2015 +0800

    Git LV.1 - 改善 `commit` 命令說明
    
    Signed-off-by: Ｖ字龍(Vdragon) <Vdragon.Taiwan@gmail.com>

commit 76e8461e0f4a59d2f14a4941d706911b0966fa2c
Author: Ｖ字龍(Vdragon) <Vdragon.Taiwan@gmail.com>
Date:   Mon Sep 7 13:27:50 2015 +0800

    Git LV.1 - 改善 git commit 說明
    
    Signed-off-by: Ｖ字龍(Vdragon) <Vdragon.Taiwan@gmail.com>

`````
方便您了解過去到底做了什麼事情。

## 已追蹤(tracked)項目 V.S. 未追蹤(untracked)項目
有提交變更到版本倉庫中的項目會被 Git 版本控制系統追蹤(track)它的變動，如果您再一次修改該項目的話下一次執行 `status` Git 命令就會顯示如下：

`````
$ git status 
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   〈被修改的項目名稱〉
`````

版本控制系統尚未追蹤變更的項目則會顯示為 untracked files（尚未被追蹤的檔案）：
`````
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        〈沒被版本控制系統追蹤的項目〉

`````

`status` Git 命令會貼心地提示您此時可以採取的操作。

## 察看兩區域間的內容差異
您可以使用 `diff` Git 命令來查看版本控制系統中任兩個區域的內容到底有哪些不同，以下舉幾個常用的例子。

### 察看目前版本與工作目錄間的內容差異
執行 `git diff` 即可查看目前工作目錄中的內容與版本倉庫中的最新版本有哪些不一樣，例如：

`````
diff --git a/zh-tw/0200 - Git 第 1 級.markdown b/zh-tw/0200 - Git 第 1 級.markdown
index a66f34b..abe3b9f 100644
--- a/zh-tw/0200 - Git 第 1 級.markdown 
+++ b/zh-tw/0200 - Git 第 1 級.markdown 
@@ -175,7 +175,7 @@ $ git add 〈包含內容變更的檔案／目錄路徑〉
 $ git commit
 `````
 
-Git 會啟動一個純文字文件編輯器讓您輸入該版本提交的標題與詳細資料，當您存檔並結束純文字編輯
器後一個新的版本就提交到版本倉庫中了！
+Git 會啟動一個純文字文件編輯器讓您輸入該版本提交的標題與詳細資料，當您存檔並結束純文字編輯
器後一個新的版本就成功地提交到版本倉庫中了！

 ### 為版本提交署名(Sign off)
 `commit` Git 命令有一個特別的參數叫作「署名(sign off)」，使用方式如下：

`````
我在「Git 會啟動……」句中多加了「成功地」三個字

### 察看目前版本與版本提交準備區域(staging area)的內容差異
執行 `git diff --cached` 即可查看目前版本提交準備區域(staging area)中的內容與版本倉庫中的最新版本有哪些不一樣

## 結語
看完這一章之後，您應該可以開始提交您的內容的新的版本到版本倉庫中，我們接下來會介紹如何建立遠端的 Git 版本倉庫、如何將本地版本倉庫的版本推送(push)到遠端版本倉庫中、如何將遠端版本倉庫克隆(clone)一份到本地端、如何在跟別人一起合作的同時解決偶爾會發生的版本衝突(conflict)的問題。

## 資源回收區
下面的內容被暫時搬到這裡，請暫時無視之
`````
，基本上包含：

* 未被被追蹤版本的檔案(untracked file)
* 已被追蹤版本的檔案(tracked file)
* 已被追蹤，且有尚未提交至提交準備區域(staging area)的變更的檔案(tracked file with unstaged changes)

![Git Cola 的狀態小工具畫面截圖](資源/git-status-from-Git-Cola.png)  
▲從 [Git Cola](http://git-cola.github.io) Git 前端軟體的狀態小工具看到的狀況
`````